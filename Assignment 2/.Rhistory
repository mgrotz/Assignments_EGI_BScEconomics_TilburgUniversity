alpha <- 0.33
n <- 0.015
g <- 0.02
x <- 0.7
epsilon <- 0.5
k_greek <- 0.75
theta1 <- 0.05
theta2 <- 2
# Creating Data Frame Structure
sim2 <- data.frame(year = 2020:2100,
L = L_0,
K = K_0,
A = A_0,
sm = sm,
Z = (K_0^alpha)*((A_0*L_0)^(1-alpha)),
m = NA,
M = M_0,
T = 1 + (M_0^k_greek/1000),
D = NA,
Y_sim2 = NA,
y_sim2 = NA,
yhat_sim2 = NA,
c_sim2 = NA,
chat_sim2 = NA)
# Start Calculating Values
sim2 <- sim2 %>%
mutate(L = L_0*exp(n*(year-2020)),
A = A_0*exp(g*(year-2020)),
m = x*((1-(sm/w))^epsilon)*Z[1],
D = 1 - (1/(1+theta1*T[1]^theta2)))
sim2 <- sim2 %>%
mutate(Y_sim2 = (1-D[1])*(Z[1]))
sim2 <- sim2 %>%
mutate(y_sim2 = Y_sim2[1]/L_0,
c_sim2 = (1-sk-sm)*y_sim2[1])
for (i in 2:nrow(sim2)){
sim2$K[i] <- (1-delta)*sim2$K[i-1] + sk*sim2$Y_sim2[i-1]
sim2$M[i] <- sim2$M[i-1] + sim2$m[i-1]
sim2$Z[i] <- (sim2$K[i]^alpha)*(sim2$A[i]*sim2$L[i])^(1-alpha)
sim2$m[i] <- x*(1-(sm/w))^epsilon*sim2$Z[i]
sim2$T[i] <- 1 + ((sim2$M[i]^k_greek)/1000)
sim2$D[i] <- 1 - (1/(1+theta1*sim2$T[i]^theta2))
sim2$Y_sim2[i] <- (1-sim2$D[i])*(sim2$Z[i])
sim2$y_sim2[i] <- sim2$Y_sim2[i]/sim2$L[i]
sim2$c_sim2[i] <- (1-sk-sm)*sim2$y_sim2[i]
sim2$yhat_sim2[i] <- log(sim2$y_sim2[i]/sim2$y_sim2[i-1])
sim2$chat_sim2[i] <- log(sim2$c_sim2[i]/sim2$c_sim2[i-1])
}
data_fig_G_wide <- data.frame(year= sim1$year, sim1_yhat = sim1$yhat_sim1, sim1_chat = sim1$chat_sim1, sim2_yhat = sim2$yhat_sim2, sim2_chat = sim2$chat_sim2)
ggplot(data_fig_G_wide)+
geom_line(aes(x= year, y= sim1_yhat), color= "red")+
geom_line(aes(x= year, sim2_yhat), color= "black")+
labs(x= "Year", y= "GDPpc growth rate", title= "Comparing GDPpc growth rate in sim1 and sim2")
ggplot(data_fig_G_wide)+
geom_line(aes(x= year, y= sim1_chat), color= "red")+
geom_line(aes(x= year, sim2_chat), color= "black")+
labs(x= "Year", y= "ConsumptionPC growth rate", title= "Comparing ConsumptionPC growth rate in sim1 and sim2")
data_fig_G_long <- data.frame(year= sim1$year, sim1_yhat = sim1$yhat_sim1, sim1_chat = sim1$chat_sim1, sim2_yhat = sim2$yhat_sim2, sim2_chat = sim2$chat_sim2)%>%
pivot_longer(2:5, names_to = "source")%>%
mutate(GDP_growth = ifelse(source%in% c("sim1_yhat", "sim2_yhat"), "GDPpc", "Consumption pc"),
simulation = ifelse(source%in% c("sim1_yhat", "sim1_chat"), "sim1", "sim2"))
ggplot(data_fig_G_long, mapping = aes(  x=value,y= source, color=simulation, linetype= GDP_growth))+
geom_boxplot()+
coord_flip()+
labs(linetype= "The growth rate", color= "The simulation")
ggplot(sim2, mapping = aes(x= year, y= yhat_sim2))+
geom_line()+
labs(x= "Year", y= "GDPpc growth rate", title = "Growth rate of GDP per capita as a function of time", subtitle = "DO THE Y-AXIS VALUES HAVE TO BE IN NATURAL LOG FORM???")
library(ggpmisc)
ggplot(data = sim2, aes(x = year, y = yhat_sim2)) +
geom_line(color = 'blue') +
scale_y_continuous(labels = scales::percent) +
labs(title = "Growth Rate of GDP per capita as a function of time", subtitle = "From 2020 - 2100", x = "Year", y = expression(hat(y)))
ggsave("sim2_yhat.png", width = 8, height = 5)
# Setting Parameters
w <- 0.05
sm <-  0.025           #sm(t=0), the new sm is added in the dataframe
L_0 <- 7.9
K_0 <- 170
M_0 <- 500
A_0 <- 7
sk <- 0.25
delta <- 0.04
alpha <- 0.33
n <- 0.015
g <- 0.02
x <- 0.7
epsilon <- 0.5
n_greek <- 0.02 #for sm
k_greek <- 0.75
theta1 <- 0.05
theta2 <- 2
# Creating Data Frame Structure
sim3 <- data.frame(year = 2020:2100,
L = L_0,
K = K_0,
A = A_0,
sm = NA,
Z = (K_0^alpha)*((A_0*L_0)^(1-alpha)),
m = NA,
M = M_0,
T = 1 + (M_0^k_greek/1000),
D = NA,
Y_sim3 = NA,
y_sim3 = NA,
yhat_sim3 = NA,
c_sim3 = NA,
chat_sim3 = NA)
# Start Calculating Values
sim3 <- sim3 %>%
mutate(L = L_0*exp(n*(year-2020)),
A = A_0*exp(g*(year-2020)),
sm = w/ (1+ exp(n_greek* (2020- year))),
m = x*((1-(sm/w))^epsilon)*Z[1],
D = 1 - (1/(1+theta1*T[1]^theta2)))
sim3 <- sim3 %>%
mutate(Y_sim3 = (1-D[1])*(Z[1]))
sim3 <- sim3 %>%
mutate(y_sim3 = Y_sim3[1]/L_0,
c_sim3 = (1-sk-sm)*y_sim3[1])
for (i in 2:nrow(sim3)){
sim3$K[i] <- (1-delta)*sim3$K[i-1] + sk*sim3$Y_sim3[i-1]
sim3$M[i] <- sim3$M[i-1] + sim3$m[i-1]
sim3$Z[i] <- (sim3$K[i]^alpha)*(sim3$A[i]*sim3$L[i])^(1-alpha)
sim3$m[i] <- x*(1-(sim3$sm[i]/w))^epsilon*sim3$Z[i]
sim3$T[i] <- 1 + ((sim3$M[i]^k_greek)/1000)
sim3$D[i] <- 1 - (1/(1+theta1*sim3$T[i]^theta2))
sim3$Y_sim3[i] <- (1-sim3$D[i])*(sim3$Z[i])
sim3$y_sim3[i] <- sim3$Y_sim3[i]/sim3$L[i]
sim3$c_sim3[i] <- (1-sk-sim3$sm[i])*sim3$y_sim3[i]
sim3$yhat_sim3[i] <- log(sim3$y_sim3[i]/sim3$y_sim3[i-1])
sim3$chat_sim3[i] <- log(sim3$c_sim3[i]/sim3$c_sim3[i-1])
}
# Step 1: Have a df of each simulation's consumption per capita
cpc_df <- data.frame(year= 2020:2100, c1= sim1$c_sim1, c2= sim2$c_sim2, c3= sim3$c_sim3)
# Step 2: Cacluate the normal cpc difference between sim1&sim2, sim1&sim3 in the cpc_df, call them Current Value difference (CV diff)
cpc_df <- cpc_df%>%
mutate(
CV_diff_c2_c1 = c2 -c1,
CV_diff_c3_c1= c3 - c1,)
# Step 3: Caclulate the PV of  CV_diff_c1_c2, and  CV_diff_c1_c3
#PV[x(t)]= exp(-r*(year-2020))*(CV_diff)
r <- 0.03
cpc_df <- cpc_df%>%
mutate(
PV_CV_diff_c2_c1= exp(-r*(2021-2020))*(c2[1]-c1[1]),
PV_CV_diff_c3_c1= exp(-r*(2021-2020))*(c3[1]-c1[1]))
for(i  in 1:nrow(cpc_df)){
cpc_df$PV_CV_diff_c2_c1[i]<- exp(-r*(cpc_df$year[i]-2020))*(cpc_df$c2[i]-cpc_df$c1[i])
cpc_df$PV_CV_diff_c3_c1[i]<- exp(-r*(cpc_df$year[i]-2020))*(cpc_df$c3[i]-cpc_df$c1[i])}
# Step 4: Calculate the CPV for each PV_diff
cpc_df <- cpc_df%>%
mutate(
CPV_PV_c2_c1 = cumsum(PV_CV_diff_c2_c1),
CPV_PV_c3_c1 = cumsum(PV_CV_diff_c3_c1))
ggplot(data = pivot_longer(cpc_df, cols = c(2, 3)), aes(x = year, y = value, color = name)) +
geom_line()
ggplot(data = pivot_longer(cpc_df, cols = c(5,7)), aes(x = year, y = value, color = name)) +
geom_line()
cpc_df %>%
filter(year %in% c(2040, 2060, 2080, 2100)) %>%
select(year, CPV_PV_c2_c1, CPV_PV_c3_c1) %>%
round(3)
ggplot(data = pivot_longer(cpc_df, cols = c(9,10)), aes(x = year, y = value, color = name)) +
geom_line()
library(writexl)
sim1_rounded <- round(sim1, digits = 4)
sim2_rounded <- round(sim2, digits = 4)
sim3_rounded <- round(sim3, digits = 4)
cpc_df_rounded <- round(cpc_df, digits = 4)
write_xlsx(list(Simulation1 = sim1_rounded, Simulation2 = sim2_rounded, Simulation3 = sim3_rounded, Evaluation = cpc_df_rounded), col_names = TRUE, "EGI_Assignment2_NuurVdVelGrotz.xlsx")
View(sim1_rounded)
# ALL THE FOLLOWING CODE WILL NOT BE VISIBLE IN TEH FINAL DOCUMENT, BUT IS JUST THERE TO HAVE THE TABLES ON THE FIRST PAGES
# Here we import all relevant packages and set options
##
library(dplyr)
library(tidyverse)
library(lubridate) # This package is used for working with dates
library(knitr) # This package is for nice tables
library(kableExtra) # Package for even nicer tables.
options(scipen = 999) # Disable scientific notation
# Importing the Current Account Balance as a % of GDP of France
# SOURCE: FRED https://fred.stlouisfed.org/series/FRAB6BLTT02STSAQ
CABalance_FR <- read_csv("sourcecode/FRED_bop_france_quarterly.csv",
col_types = cols(DATE = col_date(format = "%d/%m/%Y"),
FRAB6BLTT02STSAQ = col_number())) %>%
mutate(FRAB6BLTT02STSAQ = FRAB6BLTT02STSAQ /100) %>%
rename(date = DATE, CAasPercGDP_quart_FR = FRAB6BLTT02STSAQ)
# Importing the General Government Debt as a % of GDP.
# THIS IS NOT IN PERCENT! GOVERNMENT DEBT OF 100%  -> 1
# SOURCE: OECD https://data.oecd.org/gga/general-government-debt.htm
GovDebt_FR <- read_csv("sourcecode/OECD_gov_debt_annual.csv",
col_types = cols(LOCATION = col_character(),
INDICATOR = col_skip(), SUBJECT = col_skip(),
MEASURE = col_skip(), FREQUENCY = col_skip(),
TIME = col_date(format = "%Y"), Value = col_number(),
`Flag Codes` = col_skip())) %>%
rename(date = TIME) %>%
filter(LOCATION == "FRA") %>%
mutate(LOCATION = NULL, GovDebt_ann_FR = Value / 100, Value = NULL)
# This function transform dates
# from a quarterly format of "2000-Q1" to 2000-01-01
QuarterToDate <- function(QuarterlyDate){
NumberofQuarter <- substr(QuarterlyDate, 7, 7)
Month <- 3 * as.numeric(NumberofQuarter) - 2
Month <- ifelse(Month == 10, Month, paste(0, Month))
Year <- substr(QuarterlyDate, 1, 4)
Date_String <- paste(Year, "-", Month, "-01") %>%
str_replace_all(" ", "")
Date <- as.Date(Date_String)
Date
}
# Importing Interest Rate on Government Bonds (10 year),
# also called "Long term interest rate", in %/annum
# SOURCE: OECD https://data.oecd.org/interest/long-term-interest-rates.htm
IntRate_FR <- read_csv("sourcecode/OECD_interest_rates_france_quarterly.csv",
col_types = cols(INDICATOR = col_skip(),
SUBJECT = col_skip(), MEASURE = col_skip(),
FREQUENCY = col_skip(), Value = col_number(),
`Flag Codes` = col_skip())) %>%
mutate(date = QuarterToDate(TIME),
IntRate_quart_FR = Value / 100,
Value = NULL, TIME = NULL, LOCATION = NULL)
# Exchange rate against the US dollar
# SOURCE: FRED https://fred.stlouisfed.org/series/DEXUSEU
XR_EurUSD <- read_csv("sourcecode/FRED_exchage_rate_quarterly.csv",
col_types = cols(DATE = col_date(format = "%d/%m/%Y"),
DEXUSEU = col_number())) %>%
rename(date = DATE, XR_quart_EurUSD = DEXUSEU) %>%
mutate(XR_quart_EurUSD = 1/XR_quart_EurUSD)
# Total GDP, in millions of euro
# SOURCE: FRED https://fred.stlouisfed.org/series/CPMNACSCAB1GQFR
GDP_FR <- read_csv("sourcecode/FRED_euros_france_gdp_quarterly.csv",
col_types = cols(DATE = col_date(format = "%d/%m/%Y"),
CPMNACSCAB1GQFR = col_number())) %>%
mutate(date = DATE, GDP_quart_Millionseur_FR = CPMNACSCAB1GQFR,
CPMNACSCAB1GQFR = NULL, DATE = NULL)
# Investment (usually Gross Fixed Capital Formation), in millions of euro
# SOURCE: FRED https://fred.stlouisfed.org/series/FRAGFCFQDSMEI#0
Invest_FR <- read_csv("sourcecode/FRED_euros_investments_quarterly.csv",
col_types = cols(DATE = col_date(format = "%d/%m/%Y"),
FRAGFCFQDSMEI = col_number())) %>%
mutate(Invest_quart_Millionseur_FR = FRAGFCFQDSMEI / 1000000,
FRAGFCFQDSMEI = NULL) %>%
rename(date = DATE)
# Gross national savings as a % of GDP (savings rate).
# Again, this is in decimals, and not percent!
# SOURCE: World Bank https://data.worldbank.org/indicator/NY.GNS.ICTR.ZS
SavingsR_FR <- read_csv("sourcecode/WorldBank_GrossSavings_annual.csv",
col_types = cols(`Country Code` = col_skip(),
`Indicator Name` = col_character(),
`Indicator Code` = col_skip()), skip = 3) %>%
filter(`Country Name` == "France") %>%
pivot_longer(cols = -c(`Country Name`, `Indicator Name`),
names_to = "date",
values_to = "Savings_PercentageGDP") %>%
mutate(`Country Name` = NULL,
`Indicator Name` = NULL,
date = as.Date(paste(date, "-01-01", sep = "")),
SavR_ann_FR = Savings_PercentageGDP / 100,
Savings_PercentageGDP = NULL) %>%
filter(date >= "1999-01-01", "2019-01-01" >= date)
# Merging them all together
DF_FR <- CABalance_FR %>%
full_join(IntRate_FR, by = "date") %>%
full_join(XR_EurUSD, by = "date") %>%
full_join(GDP_FR, by = "date") %>%
full_join(Invest_FR, by = "date") %>%
full_join(GovDebt_FR, by = "date") %>%
full_join(SavingsR_FR, by = "date") %>%
filter(date != "1998-10-01") %>%
mutate(InvestmentR_Fr = Invest_quart_Millionseur_FR/GDP_quart_Millionseur_FR)
# Creating and printing a table with all the quarterly
DF_quart_FR <- DF_FR %>%
select(!c(GovDebt_ann_FR, SavR_ann_FR)) %>%
mutate(date = paste(as.character(year(date)), "-Q",
as.character(quarter(date)), sep = ""),
InvestmentR_Fr = InvestmentR_Fr * 100,
CAasPercGDP_quart_FR = CAasPercGDP_quart_FR * 100,
IntRate_quart_FR = IntRate_quart_FR * 100) %>%
rename(`Current Account Balance (as % of GDP)` = CAasPercGDP_quart_FR,
`Interest Rate (in %)` = IntRate_quart_FR,
`Exchange Rate ???/USD` = XR_quart_EurUSD,
`GDP (millions of ???)` = GDP_quart_Millionseur_FR,
`Investment (millions of ???)` = Invest_quart_Millionseur_FR,
`Investment rate (as % of GDP)` = InvestmentR_Fr,
`Date` = date
)
table_quart_FR <- DF_quart_FR %>%
kbl(caption = "Quarterly Data for France", booktabs = T,
linesep = "", digits = 4) %>%
kable_styling(latex_options = c("striped", "scale_down"))
# Creating a table with all the annual data
DF_ann_FR <- DF_FR %>%
select(c(date, GovDebt_ann_FR, SavR_ann_FR)) %>%
mutate(date = format(as.Date(date), "%Y"),
GovDebt_ann_FR = GovDebt_ann_FR * 100,
SavR_ann_FR = SavR_ann_FR * 100) %>%
na.omit() %>%
rename(`General Government Debt (as % of GDP)` = GovDebt_ann_FR,
`Gross National Savings (as % of GDP)` = SavR_ann_FR,
`Year` = date)
table_ann_FR <- DF_ann_FR %>%
kbl(caption = "Annual Data for France", booktabs = T,
linesep = "", digits = 4) %>%
kable_styling(latex_options = c("striped", "hold_position"))
table_quart_FR
table_ann_FR
# Here we import all relevant packages and set options
library(dplyr)
library(tidyverse)
library(lubridate) # This package is used for working with dates
library(knitr) # This package is for nice tables
library(kableExtra) # Package for even nicer tables.
options(scipen = 999) # Disable scientific notation
# Importing the Current Account Balance as a % of GDP of France
# SOURCE: FRED https://fred.stlouisfed.org/series/FRAB6BLTT02STSAQ
CABalance_FR <- read_csv("sourcecode/FRED_bop_france_quarterly.csv",
col_types = cols(DATE = col_date(format = "%d/%m/%Y"),
FRAB6BLTT02STSAQ = col_number())) %>%
mutate(FRAB6BLTT02STSAQ = FRAB6BLTT02STSAQ /100) %>%
rename(date = DATE, CAasPercGDP_quart_FR = FRAB6BLTT02STSAQ)
# Importing the General Government Debt as a % of GDP.
# THIS IS NOT IN PERCENT! GOVERNMENT DEBT OF 100%  -> 1
# SOURCE: OECD https://data.oecd.org/gga/general-government-debt.htm
GovDebt_FR <- read_csv("sourcecode/OECD_gov_debt_annual.csv",
col_types = cols(LOCATION = col_character(),
INDICATOR = col_skip(), SUBJECT = col_skip(),
MEASURE = col_skip(), FREQUENCY = col_skip(),
TIME = col_date(format = "%Y"), Value = col_number(),
`Flag Codes` = col_skip())) %>%
rename(date = TIME) %>%
filter(LOCATION == "FRA") %>%
mutate(LOCATION = NULL, GovDebt_ann_FR = Value / 100, Value = NULL)
# This function transform dates
# from a quarterly format of "2000-Q1" to 2000-01-01
QuarterToDate <- function(QuarterlyDate){
NumberofQuarter <- substr(QuarterlyDate, 7, 7)
Month <- 3 * as.numeric(NumberofQuarter) - 2
Month <- ifelse(Month == 10, Month, paste(0, Month))
Year <- substr(QuarterlyDate, 1, 4)
Date_String <- paste(Year, "-", Month, "-01") %>%
str_replace_all(" ", "")
Date <- as.Date(Date_String)
Date
}
# Importing Interest Rate on Government Bonds (10 year),
# also called "Long term interest rate", in %/annum
# SOURCE: OECD https://data.oecd.org/interest/long-term-interest-rates.htm
IntRate_FR <- read_csv("sourcecode/OECD_interest_rates_france_quarterly.csv",
col_types = cols(INDICATOR = col_skip(),
SUBJECT = col_skip(), MEASURE = col_skip(),
FREQUENCY = col_skip(), Value = col_number(),
`Flag Codes` = col_skip())) %>%
mutate(date = QuarterToDate(TIME),
IntRate_quart_FR = Value / 100,
Value = NULL, TIME = NULL, LOCATION = NULL)
# Exchange rate against the US dollar
# SOURCE: FRED https://fred.stlouisfed.org/series/DEXUSEU
XR_EurUSD <- read_csv("sourcecode/FRED_exchage_rate_quarterly.csv",
col_types = cols(DATE = col_date(format = "%d/%m/%Y"),
DEXUSEU = col_number())) %>%
rename(date = DATE, XR_quart_EurUSD = DEXUSEU) %>%
mutate(XR_quart_EurUSD = 1/XR_quart_EurUSD)
# Total GDP, in millions of euro
# SOURCE: FRED https://fred.stlouisfed.org/series/CPMNACSCAB1GQFR
GDP_FR <- read_csv("sourcecode/FRED_euros_france_gdp_quarterly.csv",
col_types = cols(DATE = col_date(format = "%d/%m/%Y"),
CPMNACSCAB1GQFR = col_number())) %>%
mutate(date = DATE, GDP_quart_Millionseur_FR = CPMNACSCAB1GQFR,
CPMNACSCAB1GQFR = NULL, DATE = NULL)
# Investment (usually Gross Fixed Capital Formation), in millions of euro
# SOURCE: FRED https://fred.stlouisfed.org/series/FRAGFCFQDSMEI#0
Invest_FR <- read_csv("sourcecode/FRED_euros_investments_quarterly.csv",
col_types = cols(DATE = col_date(format = "%d/%m/%Y"),
FRAGFCFQDSMEI = col_number())) %>%
mutate(Invest_quart_Millionseur_FR = FRAGFCFQDSMEI / 1000000,
FRAGFCFQDSMEI = NULL) %>%
rename(date = DATE)
# Gross national savings as a % of GDP (savings rate).
# Again, this is in decimals, and not percent!
# SOURCE: World Bank https://data.worldbank.org/indicator/NY.GNS.ICTR.ZS
SavingsR_FR <- read_csv("sourcecode/WorldBank_GrossSavings_annual.csv",
col_types = cols(`Country Code` = col_skip(),
`Indicator Name` = col_character(),
`Indicator Code` = col_skip()), skip = 3) %>%
filter(`Country Name` == "France") %>%
pivot_longer(cols = -c(`Country Name`, `Indicator Name`),
names_to = "date",
values_to = "Savings_PercentageGDP") %>%
mutate(`Country Name` = NULL,
`Indicator Name` = NULL,
date = as.Date(paste(date, "-01-01", sep = "")),
SavR_ann_FR = Savings_PercentageGDP / 100,
Savings_PercentageGDP = NULL) %>%
filter(date >= "1999-01-01", "2019-01-01" >= date)
# Merging them all together
DF_FR <- CABalance_FR %>%
full_join(IntRate_FR, by = "date") %>%
full_join(XR_EurUSD, by = "date") %>%
full_join(GDP_FR, by = "date") %>%
full_join(Invest_FR, by = "date") %>%
full_join(GovDebt_FR, by = "date") %>%
full_join(SavingsR_FR, by = "date") %>%
filter(date != "1998-10-01") %>%
mutate(InvestmentR_Fr = Invest_quart_Millionseur_FR/GDP_quart_Millionseur_FR)
# Creating and printing a table with all the quarterly data
DF_quart_FR <- DF_FR %>%
select(!c(GovDebt_ann_FR, SavR_ann_FR)) %>%
mutate(date = paste(as.character(year(date)), "-Q",
as.character(quarter(date)), sep = ""),
InvestmentR_Fr = InvestmentR_Fr * 100,
CAasPercGDP_quart_FR = CAasPercGDP_quart_FR * 100,
IntRate_quart_FR = IntRate_quart_FR * 100) %>%
rename(`Current Account Balance (as % of GDP)` = CAasPercGDP_quart_FR,
`Interest Rate (in %)` = IntRate_quart_FR,
`Exchange Rate ???/USD` = XR_quart_EurUSD,
`GDP (millions of ???)` = GDP_quart_Millionseur_FR,
`Investment (millions of ???)` = Invest_quart_Millionseur_FR,
`Investment rate (as % of GDP)` = InvestmentR_Fr,
`Date` = date
)
table_quart_FR <- DF_quart_FR %>%
kbl(caption = "Quarterly Data for France", booktabs = T,
linesep = "", digits = 4) %>%
kable_styling(latex_options = c("striped", "scale_down"))
# Creating and printing a table with all the annual data
DF_ann_FR <- DF_FR %>%
select(c(date, GovDebt_ann_FR, SavR_ann_FR)) %>%
mutate(date = format(as.Date(date), "%Y"),
GovDebt_ann_FR = GovDebt_ann_FR * 100,
SavR_ann_FR = SavR_ann_FR * 100) %>%
na.omit() %>%
rename(`General Government Debt (as % of GDP)` = GovDebt_ann_FR,
`Gross National Savings (as % of GDP)` = SavR_ann_FR,
`Year` = date)
table_ann_FR <- DF_ann_FR %>%
kbl(caption = "Annual Data for France", booktabs = T,
linesep = "", digits = 4) %>%
kable_styling(latex_options = c("striped", "hold_position"))
#Creating plot for Gov Debt & Interest Rate v Time
#Omitting NA first
DF_FR_NA <- DF_FR %>%
na.omit
colors1 <- c("Government debt" = "navyblue",
"Long term interest rate" = "dodgerblue1")
ggplot() +
geom_line(DF_FR_NA,
mapping = aes(x = date,
y = GovDebt_ann_FR,
color = "Government debt")) +
geom_line(DF_FR,
mapping = aes(x = date, y = IntRate_quart_FR*10,
color = "Long term interest rate")) +
scale_y_continuous(labels = scales::percent,
name = "Government Debt (annually in % of GDP)",
sec.axis = sec_axis(~ . /10,
name = paste("Long Term Interest",
"Rate (quarterly in %)"),
labels = scales::percent)) +
labs(x = "Year",
title = "Government Debt (% of GDP) and Long Term Interest Rates for France",
color = "") +
scale_color_manual(values = colors1) +
theme(legend.position="bottom") +
scale_x_date(limits = c(as.Date("1999-01-01"), as.Date("2019-01-01")))
# Plotting Current Account and Exchange Rates with different y-axes
colors2 <- c("Current Account Balance" = "navyblue",
"Exchange Rate Eur/USD" = "dodgerblue1")
ggplot() +
geom_line(DF_FR,
mapping = aes(x = date,
y = CAasPercGDP_quart_FR,
color = "Current Account Balance")) +
geom_line(DF_FR,
mapping = aes(x = date,
y = (XR_quart_EurUSD - 0.8) / 10,
color = "Exchange Rate Eur/USD")) +
scale_y_continuous(labels = scales::percent,
limits = c(-.04, 0.04),
sec.axis = sec_axis(~ . *10 +.8,
name = "Exchange Rate - Eur/Dollar")) +
labs(x = "Year",
y = "Current Account (% of GDP)",
title = paste("Current Account (CA) as % of GDP",
"and Exchange Rates for France"),
color = "") +
scale_color_manual(values = colors2) +
theme(legend.position="bottom")
#Assinging colors to titles
colors3 <- c("Savings Rate" = "navyblue", "Investment Rate" = "dodgerblue1")
#Plotting graph
ggplot() +
geom_line(DF_FR_NA,
mapping = aes(x = date,
y = SavR_ann_FR,
color = "Savings Rate")) +
geom_line(DF_FR,
mapping = aes(x = date,
y = InvestmentR_Fr,
color = "Investment Rate")) +
labs(x = "Year",
y = "% of GDP",
title = "Investment and Savings Rate as % of GDP for France",
color = "") +
scale_y_continuous(labels = scales::percent,
breaks = seq(0, 0.25, by = 0.05),
limits = c(0.15, 0.25)) +
scale_color_manual(values = colors3) +
theme(legend.position="bottom") +
scale_x_date(limits = c(as.Date("1999-01-01"), as.Date("2019-06-01")))
View(DF_FR)
